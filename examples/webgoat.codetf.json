{"run":{"vendor":"io.codemodder","tool":"codemodder","version":"1.0.0","commandLine":"--codemod-include pixee:java/harden-xmlinputfactory,pixee:java/harden-zip-entry-paths,pixee:java/encode-jsp-scriptlet,pixee:java/fix-verb-tampering,pixee:java/secure-random,pixee:java/sql-parameterizer,pixee:java/limit-readline,pixee:java/validate-jakarta-forward-path,pixee:java/upgrade-sslengine-tls,pixee:java/upgrade-sslparameters-tls,pixee:java/upgrade-sslsocket-tls,pixee:java/upgrade-sslcontext-tls,pixee:java/harden-process-creation,pixee:java/make-prng-seed-unpredictable,pixee:java/harden-xmldecoder-stream,pixee:java/sandbox-url-creation,pixee:java/sanitize-apache-multipart-filename,pixee:java/sanitize-spring-multipart-filename,pixee:java/strip-http-header-newlines,pixee:java/harden-xstream,codeql:java/missing-jwt-signature-check,codeql:java/database-resource-leak,codeql:java/stack-trace-exposure,codeql:java/insecure-cookie,codeql:java/output-resource-leak,pixee:java/upgrade-tempfile-to-nio,pixee:java/switch-literal-first,pixee:java/prevent-filewriter-leak-with-nio,pixee:java/hql-parameterizer,pixee:java/disable-dircontext-deserialization,pixee:java/move-switch-default-last,pixee:java/verbose-request-mapping,pixee:java/add-clarifying-braces,semgrep:java/java.lang.security.audit.overly-permissive-file-permission.overly-permissive-file-permission,sonar:java/harden-string-parse-to-primitives-s2130,sonar:java/overrides-match-synchronization-s3551,sonar:java/remove-redundant-variable-creation-s1488,sonar:java/simplify-rest-controller-annotations-s6833,sonar:java/remove-commented-code-s125,sonar:java/remove-unused-private-method-s1144,sonar:java/declare-variable-on-separate-line-s1659,sonar:java/remove-unused-local-variable-s1481,sonar:java/define-constant-for-duplicate-literal-s1192,sonar:java/remove-useless-parentheses-s1110,sonar:java/avoid-implicit-public-constructor-s1118,sonar:java/replace-stream-collectors-to-list-s6204,sonar:java/add-missing-override-s1161,sonar:java/substitute-replaceAll-s5361,sonar:java/remove-redundant-static-s2786 --output-format codetf --output /mnt/code-workspaces/workspace-11795311773268099153/workspace/results/results.codetf.json /mnt/code-workspaces/workspace-11795311773268099153/workspace","elapsed":579153,"directory":"/mnt/code-workspaces/workspace-11795311773268099153/workspace","sarifs":[]},"results":[{"codemod":"pixee:java/harden-process-creation","summary":"Introduced protections against system command injection","description":"This change hardens all instances of [Runtime#exec()](https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Runtime.html) to offer protection against attack.\n\nLeft unchecked, `Runtime#exec()` can execute any arbitrary system command. If an attacker can control part of the strings used to as program paths or arguments, they could execute arbitrary programs, install malware, and anything else they could do if they had a shell open on the application host.\n\nOur change introduces a sandbox which protects the application:\n\n```diff\n+ import io.github.pixee.security.SystemCommand;\n  ...\n- Process p = Runtime.getRuntime().exec(command);\n+ Process p = SystemCommand.runCommand(Runtime.getRuntime(), command);\n```\n\nThe default restrictions applied are the following:\n* **Prevent command chaining**. Many exploits work by injecting command separators and causing the shell to interpret a second, malicious command. The `SystemCommand#runCommand()` attempts to parse the given command, and throw a `SecurityException` if multiple commands are present.\n* **Prevent arguments targeting sensitive files.** There is little reason for custom code to target sensitive system files like `/etc/passwd`, so the sandbox prevents arguments that point to these files that may be targets for exfiltration.\n\nThere are [more options for sandboxing](https://github.com/pixee/java-security-toolkit/blob/main/src/main/java/io/github/pixee/security/SystemCommand.java#L15) if you are interested in locking down system commands even more.\n","failedFiles":[],"references":[{"url":"https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html","description":"https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html"},{"url":"https://wiki.sei.cmu.edu/confluence/display/java/IDS07-J.+Sanitize+untrusted+data+passed+to+the+Runtime.exec%28%29+method","description":"https://wiki.sei.cmu.edu/confluence/display/java/IDS07-J.+Sanitize+untrusted+data+passed+to+the+Runtime.exec%28%29+method"}],"properties":{},"changeset":[{"path":"src/main/java/org/dummy/insecure/framework/VulnerableTaskHolder.java","diff":"--- VulnerableTaskHolder.java\n+++ VulnerableTaskHolder.java\n@@ -1,5 +1,6 @@\n package org.dummy.insecure.framework;\n \n+import io.github.pixee.security.SystemCommand;\n import java.io.BufferedReader;\n import java.io.IOException;\n import java.io.InputStreamReader;\n@@ -62,7 +63,7 @@\n         && taskAction.length() < 22) {\n       log.info(\"about to execute: {}\", taskAction);\n       try {\n-        Process p = Runtime.getRuntime().exec(taskAction);\n+        Process p = SystemCommand.runCommand(Runtime.getRuntime(), taskAction);\n         BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));\n         String line = null;\n         while ((line = in.readLine()) != null) {","changes":[{"lineNumber":65,"properties":{},"description":"Hardened this system call to make it resistant to injected commands and commands that target sensitive files","diffSide":"left","packageActions":[{"action":"ADD","result":"COMPLETED","package":"pkg:maven/io.github.pixee/java-security-toolkit@1.1.2"}],"parameters":[]}]},{"path":"pom.xml","diff":"--- pom.xml\n+++ pom.xml\n@@ -149,6 +149,7 @@\n     <xstream.version>1.4.5</xstream.version>\n     <!-- do not update necessary for lesson -->\n     <zxcvbn.version>1.8.0</zxcvbn.version>\n+    <versions.java-security-toolkit>1.1.2</versions.java-security-toolkit>\n   </properties>\n \n   <dependencyManagement>\n@@ -267,6 +268,11 @@\n         <artifactId>jruby</artifactId>\n         <version>9.4.3.0</version>\n       </dependency>\n+      <dependency>\n+        <groupId>io.github.pixee</groupId>\n+        <artifactId>java-security-toolkit</artifactId>\n+        <version>${versions.java-security-toolkit}</version>\n+      </dependency>\n     </dependencies>\n   </dependencyManagement>\n   <dependencies>\n@@ -444,6 +450,10 @@\n       <artifactId>spring-boot-properties-migrator</artifactId>\n       <scope>runtime</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>io.github.pixee</groupId>\n+      <artifactId>java-security-toolkit</artifactId>\n+    </dependency>\n   </dependencies>\n \n   <repositories>","changes":[{"lineNumber":447,"properties":{"contextual_description":"true"},"description":"This library holds security tools for protecting Java API calls.\n\nLicense: MIT ✅ | [Open source](https://github.com/pixee/java-security-toolkit) ✅ | [More facts](https://mvnrepository.com/artifact/io.github.pixee/java-security-toolkit/1.1.2)\n","diffSide":"right","packageActions":[],"parameters":[]}]}]},{"codemod":"pixee:java/harden-xmlinputfactory","summary":"Introduced protections against XXE attacks","description":"This change updates all instances of [XMLInputFactory](https://docs.oracle.com/javase/8/docs/api/javax/xml/stream/XMLInputFactory.html) to prevent them from resolving external entities, which can protect you from arbitrary code execution, sensitive data exfiltration, and probably a bunch more evil things attackers are still discovering.\n\nWithout this protection, attackers can cause your `XMLInputFactory` parser to retrieve sensitive information with attacks like this:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE foo [ <!ENTITY xxe SYSTEM \"file:///etc/passwd\"> ]>\n<book>\n    <title>&xxe;</title>\n</book>\n```\n\nYes, it's pretty insane that this is the default behavior. Our change hardens the factories created with the necessary security features to prevent your parser from resolving external entities.\n\n```diff\n+ import io.github.pixee.security.XMLInputFactorySecurity;\n  ...\n- XMLInputFactory xmlInputFactory = XMLInputFactory.newFactory();\n+ XMLInputFactory xmlInputFactory = XMLInputFactorySecurity.hardenFactory(XMLInputFactory.newFactory());\n```\n\nYou could take our protections one step further by changing our supplied code to prevent the user from supplying a `DOCTYPE`, which is more aggressive and more secure, but also more likely to affect existing code behavior:\n```diff\n+ import io.github.pixee.security.XMLInputFactorySecurity;\n+ import io.github.pixee.security.XMLRestrictions;\n  ...\n  XMLInputFactory xmlInputFactory = XMLInputFactorySecurity.hardenFactory(XMLInputFactory.newFactory(), XMLRestrictions.DISALLOW_DOCTYPE);\n```\n","failedFiles":[],"references":[{"url":"https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html","description":"https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html"},{"url":"https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing","description":"https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing"},{"url":"https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/XXE%20Injection/README.md","description":"https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/XXE%20Injection/README.md"}],"properties":{},"changeset":[{"path":"src/main/java/org/owasp/webgoat/lessons/xxe/CommentsCache.java","diff":"--- CommentsCache.java\n+++ CommentsCache.java\n@@ -22,6 +22,7 @@\n \n package org.owasp.webgoat.lessons.xxe;\n \n+import static io.github.pixee.security.XMLInputFactorySecurity.hardenFactory;\n import static java.util.Optional.empty;\n import static java.util.Optional.of;\n \n@@ -95,7 +96,7 @@\n    */\n   protected Comment parseXml(String xml) throws XMLStreamException, JAXBException {\n     var jc = JAXBContext.newInstance(Comment.class);\n-    var xif = XMLInputFactory.newInstance();\n+    var xif = hardenFactory(XMLInputFactory.newInstance());\n \n     if (webSession.isSecurityEnabled()) {\n       xif.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\"); // Compliant","changes":[{"lineNumber":98,"properties":{},"description":"Hardened the XML processor to prevent external entities from being resolved, which can prevent data exfiltration and arbitrary code execution","diffSide":"left","packageActions":[{"action":"ADD","result":"SKIPPED","package":"pkg:maven/io.github.pixee/java-security-toolkit@1.1.2"}],"parameters":[]}]}]},{"codemod":"pixee:java/harden-xstream","summary":"Hardened XStream with a converter to prevent exploitation","description":"This change hardens usage of the `XStream` library to prevent remote code execution attacks.\n\nXStream is a very flexible library, but it has a history of serious vulnerabilities when handling untrusted data because it was never intended for that use case. There are some fundamental issues with the design that make it difficult to make safe when using it by default.\n\nOur change hardens new instances of `XStream` so that they can't deserialize types that are commonly used in exploits (and never in normal usage) and it looks like this:\n\n```diff\n+ import io.github.pixee.security.xstream.HardeningConverter;\n  XStream xstream = new XStream();\n+ xstream.registerConverter(new HardeningConverter());\n  return (AcmeObject)xstream.fromXML(xml);\n```\n\nLooking at the [history of exploits](https://x-stream.github.io/security.html#CVEs) shows that this change will either stop most exploits or raise the bar of exploitation. If you believe there should be more types added to the denylist, please [fill out a ticket](https://github.com/pixee/java-security-toolkit/issues/new) with your suggestions.\n","failedFiles":[],"references":[{"url":"https://x-stream.github.io/security.html","description":"https://x-stream.github.io/security.html"},{"url":"http://diniscruz.blogspot.com/2013/12/xstream-remote-code-execution-exploit.html","description":"http://diniscruz.blogspot.com/2013/12/xstream-remote-code-execution-exploit.html"},{"url":"https://www.contrastsecurity.com/security-influencers/serialization-must-die-act-2-xstream","description":"https://www.contrastsecurity.com/security-influencers/serialization-must-die-act-2-xstream"},{"url":"https://x-stream.github.io/CVE-2013-7285.html","description":"https://x-stream.github.io/CVE-2013-7285.html"}],"properties":{},"changeset":[{"path":"src/main/java/org/owasp/webgoat/lessons/vulnerablecomponents/VulnerableComponentsLesson.java","diff":"--- VulnerableComponentsLesson.java\n+++ VulnerableComponentsLesson.java\n@@ -23,6 +23,7 @@\n package org.owasp.webgoat.lessons.vulnerablecomponents;\n \n import com.thoughtworks.xstream.XStream;\n+import io.github.pixee.security.xstream.HardeningConverter;\n import org.apache.commons.lang3.StringUtils;\n import org.owasp.webgoat.container.assignments.AssignmentEndpoint;\n import org.owasp.webgoat.container.assignments.AssignmentHints;\n@@ -39,6 +40,7 @@\n   @PostMapping(\"/VulnerableComponents/attack1\")\n   public @ResponseBody AttackResult completed(@RequestParam String payload) {\n     XStream xstream = new XStream();\n+    xstream.registerConverter(new HardeningConverter());\n     xstream.setClassLoader(Contact.class.getClassLoader());\n     xstream.alias(\"contact\", ContactImpl.class);\n     xstream.ignoreUnknownElements();","changes":[{"lineNumber":41,"properties":{},"description":"Added an XStream [Converter](https://x-stream.github.io/converter-tutorial.html) which prevents common exploits","diffSide":"left","packageActions":[{"action":"ADD","result":"COMPLETED","package":"pkg:maven/io.github.pixee/java-security-toolkit-xstream@1.0.2"}],"parameters":[]}]},{"path":"pom.xml","diff":"--- pom.xml\n+++ pom.xml\n@@ -150,6 +150,7 @@\n     <!-- do not update necessary for lesson -->\n     <zxcvbn.version>1.8.0</zxcvbn.version>\n     <versions.java-security-toolkit>1.1.2</versions.java-security-toolkit>\n+    <versions.java-security-toolkit-xstream>1.0.2</versions.java-security-toolkit-xstream>\n   </properties>\n \n   <dependencyManagement>\n@@ -273,6 +274,11 @@\n         <artifactId>java-security-toolkit</artifactId>\n         <version>${versions.java-security-toolkit}</version>\n       </dependency>\n+      <dependency>\n+        <groupId>io.github.pixee</groupId>\n+        <artifactId>java-security-toolkit-xstream</artifactId>\n+        <version>${versions.java-security-toolkit-xstream}</version>\n+      </dependency>\n     </dependencies>\n   </dependencyManagement>\n   <dependencies>\n@@ -454,6 +460,10 @@\n       <groupId>io.github.pixee</groupId>\n       <artifactId>java-security-toolkit</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>io.github.pixee</groupId>\n+      <artifactId>java-security-toolkit-xstream</artifactId>\n+    </dependency>\n   </dependencies>\n \n   <repositories>","changes":[{"lineNumber":457,"properties":{"contextual_description":"true"},"description":"This library holds security APIs for hardening XStream operations.\n\nLicense: MIT ✅ | [Open source](https://github.com/pixee/java-security-toolkit-xstream) ✅ | No transitive dependencies ✅ | [More facts](https://mvnrepository.com/artifact/io.github.pixee/java-security-toolkit-xstream/1.0.2)\n","diffSide":"right","packageActions":[],"parameters":[]}]}]},{"codemod":"pixee:java/limit-readline","summary":"Protect `readLine()` against DoS","description":"This change hardens all [`BufferedReader#readLine()`](https://docs.oracle.com/javase/8/docs/api/java/io/BufferedReader.html#readLine--) operations against memory exhaustion.\n\nThere is no way to call `readLine()` safely since it is, by its nature, a read that must be terminated by the stream provider. Furthermore, a stream of data provided by an untrusted source could lead to a denial of service attack, as attackers can provide an infinite stream of bytes until the process runs out of memory.\n\nFixing it is straightforward using an API which limits the amount of expected characters to some sane limit. This is what our changes look like:\n\n```diff\n+ import io.github.pixee.security.BoundedLineReader;\n  ...\n  BufferedReader reader = getReader();\n- String line = reader.readLine(); // unlimited read, can lead to DoS\n+ String line = BoundedLineReader.readLine(reader, 5_000_000); // limited to 5MB\n```\n","failedFiles":[],"references":[{"url":"https://vulncat.fortify.com/en/detail?id=desc.dataflow.abap.denial_of_service","description":"https://vulncat.fortify.com/en/detail?id=desc.dataflow.abap.denial_of_service"},{"url":"https://cwe.mitre.org/data/definitions/400.html","description":"https://cwe.mitre.org/data/definitions/400.html"}],"properties":{},"changeset":[{"path":"src/main/java/org/dummy/insecure/framework/VulnerableTaskHolder.java","diff":"--- VulnerableTaskHolder.java\n+++ VulnerableTaskHolder.java\n@@ -1,5 +1,6 @@\n package org.dummy.insecure.framework;\n \n+import io.github.pixee.security.BoundedLineReader;\n import io.github.pixee.security.SystemCommand;\n import java.io.BufferedReader;\n import java.io.IOException;\n@@ -66,7 +67,7 @@\n         Process p = SystemCommand.runCommand(Runtime.getRuntime(), taskAction);\n         BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));\n         String line = null;\n-        while ((line = in.readLine()) != null) {\n+        while ((line = BoundedLineReader.readLine(in, 5_000_000)) != null) {\n           log.info(line);\n         }\n       } catch (IOException e) {","changes":[{"lineNumber":69,"properties":{},"description":"Replaced with a call that offers an upper bound on the number of characters that will be read before giving up and throwing a security exception","diffSide":"left","packageActions":[{"action":"ADD","result":"SKIPPED","package":"pkg:maven/io.github.pixee/java-security-toolkit@1.1.2"}],"parameters":[]}]}]},{"codemod":"pixee:java/sanitize-spring-multipart-filename","summary":"Sanitized user-provided file names in HTTP multipart uploads","description":"This change hardens usage of the [Spring Web](https://github.com/spring-projects/spring-framework) multipart request and file uploading feature to prevent file overwrite attacks.\n\nAlthough end users uploading a file through the browser can't fully control the file name, attackers armed with HTTP proxies, scripts or `curl` could manipulate the file to contain directory escape sequences and send in values like `../../../../../etc/passwd`. This is a common place that developers forget to distrust user input and end up including the attacker's file name in the path they end up writing.\n\nOur change sanitizes the output of `FileItem#getName()`, stripping the value of null bytes and directory escape sequences, leaving a simple file name in the expected form. The code change is very simple and looks like this:\n\n```diff\n+ import io.github.pixee.security.Filenames;\n  ...\n  MultipartFile uploadedFile = parseFile(request);\n- String name = uploadedFile.getOriginalFilename(); // vulnerable\n+ String name = Filenames.toSimpleFileName(uploadedFile.getOriginalFilename()); // safe\n  writeFile(new File(\"my_upload_dir\", name));\n```\n","failedFiles":[],"references":[{"url":"https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload","description":"https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload"},{"url":"https://portswigger.net/web-security/file-upload","description":"https://portswigger.net/web-security/file-upload"},{"url":"https://github.com/spring-projects/spring-framework/blob/c989470f94926ee5c7474bead278b00e9aaac787/spring-web/src/main/java/org/springframework/web/multipart/MultipartFile.java#L68","description":"https://github.com/spring-projects/spring-framework/blob/c989470f94926ee5c7474bead278b00e9aaac787/spring-web/src/main/java/org/springframework/web/multipart/MultipartFile.java#L68"}],"properties":{},"changeset":[{"path":"src/main/java/org/owasp/webgoat/lessons/pathtraversal/ProfileUploadRemoveUserInput.java","diff":"--- ProfileUploadRemoveUserInput.java\n+++ ProfileUploadRemoveUserInput.java\n@@ -1,5 +1,6 @@\n package org.owasp.webgoat.lessons.pathtraversal;\n \n+import io.github.pixee.security.Filenames;\n import static org.springframework.http.MediaType.ALL_VALUE;\n import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;\n \n@@ -33,6 +34,6 @@\n   @ResponseBody\n   public AttackResult uploadFileHandler(\n       @RequestParam(\"uploadedFileRemoveUserInput\") MultipartFile file) {\n-    return super.execute(file, file.getOriginalFilename());\n+    return super.execute(file, Filenames.toSimpleFileName(file.getOriginalFilename()));\n   }\n }","changes":[{"lineNumber":36,"properties":{},"description":"Wrapped the file name with a sanitizer call that takes out path escaping characters","diffSide":"left","packageActions":[{"action":"ADD","result":"SKIPPED","package":"pkg:maven/io.github.pixee/java-security-toolkit@1.1.2"}],"parameters":[]}]},{"path":"src/main/java/org/owasp/webgoat/lessons/pathtraversal/ProfileZipSlip.java","diff":"--- ProfileZipSlip.java\n+++ ProfileZipSlip.java\n@@ -1,5 +1,6 @@\n package org.owasp.webgoat.lessons.pathtraversal;\n \n+import io.github.pixee.security.Filenames;\n import static org.springframework.http.MediaType.ALL_VALUE;\n import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;\n \n@@ -49,7 +50,7 @@\n       produces = APPLICATION_JSON_VALUE)\n   @ResponseBody\n   public AttackResult uploadFileHandler(@RequestParam(\"uploadedFileZipSlip\") MultipartFile file) {\n-    if (!file.getOriginalFilename().toLowerCase().endsWith(\".zip\")) {\n+    if (!Filenames.toSimpleFileName(file.getOriginalFilename()).toLowerCase().endsWith(\".zip\")) {\n       return failed(this).feedback(\"path-traversal-zip-slip.no-zip\").build();\n     } else {\n       return processZipUpload(file);\n@@ -63,7 +64,7 @@\n     var currentImage = getProfilePictureAsBase64();\n \n     try {\n-      var uploadedZipFile = tmpZipDirectory.resolve(file.getOriginalFilename());\n+      var uploadedZipFile = tmpZipDirectory.resolve(Filenames.toSimpleFileName(file.getOriginalFilename()));\n       FileCopyUtils.copy(file.getBytes(), uploadedZipFile.toFile());\n \n       ZipFile zip = new ZipFile(uploadedZipFile.toFile());","changes":[{"lineNumber":52,"properties":{},"description":"Wrapped the file name with a sanitizer call that takes out path escaping characters","diffSide":"left","packageActions":[{"action":"ADD","result":"SKIPPED","package":"pkg:maven/io.github.pixee/java-security-toolkit@1.1.2"}],"parameters":[]},{"lineNumber":66,"properties":{},"description":"Wrapped the file name with a sanitizer call that takes out path escaping characters","diffSide":"left","packageActions":[{"action":"ADD","result":"SKIPPED","package":"pkg:maven/io.github.pixee/java-security-toolkit@1.1.2"}],"parameters":[]}]},{"path":"src/main/java/org/owasp/webgoat/webwolf/FileServer.java","diff":"--- FileServer.java\n+++ FileServer.java\n@@ -22,6 +22,7 @@\n \n package org.owasp.webgoat.webwolf;\n \n+import io.github.pixee.security.Filenames;\n import static java.util.Comparator.comparing;\n import static org.springframework.http.MediaType.ALL_VALUE;\n \n@@ -86,8 +87,8 @@\n     String username = authentication.getName();\n     var destinationDir = new File(fileLocation, username);\n     destinationDir.mkdirs();\n-    myFile.transferTo(new File(destinationDir, myFile.getOriginalFilename()));\n-    log.debug(\"File saved to {}\", new File(destinationDir, myFile.getOriginalFilename()));\n+    myFile.transferTo(new File(destinationDir, Filenames.toSimpleFileName(myFile.getOriginalFilename())));\n+    log.debug(\"File saved to {}\", new File(destinationDir, Filenames.toSimpleFileName(myFile.getOriginalFilename())));\n \n     return new ModelAndView(\n         new RedirectView(\"files\", true),","changes":[{"lineNumber":89,"properties":{},"description":"Wrapped the file name with a sanitizer call that takes out path escaping characters","diffSide":"left","packageActions":[{"action":"ADD","result":"SKIPPED","package":"pkg:maven/io.github.pixee/java-security-toolkit@1.1.2"}],"parameters":[]},{"lineNumber":90,"properties":{},"description":"Wrapped the file name with a sanitizer call that takes out path escaping characters","diffSide":"left","packageActions":[{"action":"ADD","result":"SKIPPED","package":"pkg:maven/io.github.pixee/java-security-toolkit@1.1.2"}],"parameters":[]}]}]},{"codemod":"pixee:java/sql-parameterizer","summary":"Refactored to use parameterized SQL APIs","description":"This change refactors SQL statements to be parameterized, rather than built by hand.\n\nWithout parameterization, developers must remember to escape inputs using the rules for that database. It's usually buggy, at the least -- and sometimes vulnerable.\n\nOur changes look something like this:\n\n```diff\n- Statement stmt = connection.createStatement();\n- ResultSet rs = stmt.executeQuery(\"SELECT * FROM users WHERE name = '\" + user + \"'\");\n+ PreparedStatement stmt = connection.prepareStatement(\"SELECT * FROM users WHERE name = ?\");\n+ stmt.setString(1, user);\n+ ResultSet rs = stmt.executeQuery();\n```\n","failedFiles":[],"references":[{"url":"https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html","description":"https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html"},{"url":"https://cwe.mitre.org/data/definitions/89.html","description":"https://cwe.mitre.org/data/definitions/89.html"}],"properties":{},"changeset":[{"path":"src/main/java/org/owasp/webgoat/lessons/sqlinjection/advanced/SqlInjectionChallenge.java","diff":"--- SqlInjectionChallenge.java\n+++ SqlInjectionChallenge.java\n@@ -23,6 +23,7 @@\n package org.owasp.webgoat.lessons.sqlinjection.advanced;\n \n import java.sql.*;\n+import java.sql.PreparedStatement;\n import lombok.extern.slf4j.Slf4j;\n import org.owasp.webgoat.container.LessonDataSource;\n import org.owasp.webgoat.container.assignments.AssignmentEndpoint;\n@@ -64,9 +65,10 @@\n \n       try (Connection connection = dataSource.getConnection()) {\n         String checkUserQuery =\n-            \"select userid from sql_challenge_users where userid = '\" + username_reg + \"'\";\n-        Statement statement = connection.createStatement();\n-        ResultSet resultSet = statement.executeQuery(checkUserQuery);\n+            \"select userid from sql_challenge_users where userid = ?\";\n+        PreparedStatement statement = connection.prepareStatement(checkUserQuery);\n+        statement.setString(1, username_reg);\n+        ResultSet resultSet = statement.execute();\n \n         if (resultSet.next()) {\n           if (username_reg.contains(\"tom'\")) {","changes":[{"lineNumber":69,"properties":{},"description":"Parameterized SQL usage to prevent any bugs or vulnerabilities","diffSide":"left","packageActions":[],"parameters":[]}]},{"path":"src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson8.java","diff":"--- SqlInjectionLesson8.java\n+++ SqlInjectionLesson8.java\n@@ -22,6 +22,7 @@\n \n package org.owasp.webgoat.lessons.sqlinjection.introduction;\n \n+import java.sql.PreparedStatement;\n import static java.sql.ResultSet.CONCUR_UPDATABLE;\n import static java.sql.ResultSet.TYPE_SCROLL_SENSITIVE;\n \n@@ -148,14 +149,15 @@\n     action = action.replace('\\'', '\"');\n     Calendar cal = Calendar.getInstance();\n     SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n-    String time = sdf.format(cal.getTime());\n \n     String logQuery =\n-        \"INSERT INTO access_log (time, action) VALUES ('\" + time + \"', '\" + action + \"')\";\n+        \"INSERT INTO access_log (time, action) VALUES (?\" + \", ?\" + \")\";\n \n     try {\n-      Statement statement = connection.createStatement(TYPE_SCROLL_SENSITIVE, CONCUR_UPDATABLE);\n-      statement.executeUpdate(logQuery);\n+      PreparedStatement statement = connection.prepareStatement(logQuery, TYPE_SCROLL_SENSITIVE, CONCUR_UPDATABLE);\n+      statement.setString(1, sdf.format(cal.getTime()));\n+      statement.setString(2, action);\n+      statement.execute();\n     } catch (SQLException e) {\n       System.err.println(e.getMessage());\n     }","changes":[{"lineNumber":158,"properties":{},"description":"Parameterized SQL usage to prevent any bugs or vulnerabilities","diffSide":"left","packageActions":[],"parameters":[]}]}]},{"codemod":"pixee:java/sandbox-url-creation","summary":"Sandboxed URL creation to prevent SSRF attacks","description":"This change sandboxes the creation of [`java.net.URL`](https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/net/URL.html) objects so they will be more resistant to Server-Side Request Forgery (SSRF) attacks.\n\nMost of the time when you create a URL, you're intending to reference an HTTP endpoint, like an internal microservice. However, URLs can point to local file system files, a Gopher stream in your local network, a JAR file on a remote Internet site, and all kinds of other unexpected and undesirable stuff. When the URL values are influenced by attackers, they can trick your application into fetching internal resources, running malicious code, or otherwise harming the system. Consider the following code:\n\n```java\nString url = userInput.getServiceAddress();\nreturn IOUtils.toString(new URL(url).openConnection());\n```\n\nIn this case, an attacker could supply a value like `jar:file:/path/to/appserver/lib.jar` and attempt to read the contents of your application's code.\n\nOur changes introduce sandboxing around URL creation that force the developers to specify some boundaries on the types of URLs they expect to create:\n\n```diff\n+ import io.github.pixee.security.Urls;\n+ import io.github.pixee.security.HostValidator;\n  ...\n  String url = userInput.getServiceAddress();\n- URL u = new URL(url);\n+ URL u = Urls.create(url, Urls.HTTP_PROTOCOLS, HostValidator.DENY_COMMON_INFRASTRUCTURE_TARGETS);\n  InputStream is = u.openConnection();\n```\n\nThis change alone reduces attack surface significantly, but can be enhanced to create even more security by specifying some controls around the hosts we expect to connect with:\n\n```diff\n+ import io.github.pixee.security.Urls;\n+ import io.github.pixee.security.HostValidator;\n  ...\n  HostValidator allowsOnlyGoodDotCom = HostValidator.fromAllowedHostPattern(Pattern.compile(\"good\\\\.com\"));\n  URL u = Urls.create(url, Urls.HTTP_PROTOCOLS, allowsOnlyGoodDotCom);\n```\n\nNote: Beware temptation to write some validation on your own. Parsing URLs is difficult and differences between parsers in validation and execution will certainly lead to exploits as attackers [have repeatedly proven](https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf).\n","failedFiles":[],"references":[{"url":"https://www.hacksplaining.com/prevention/ssrf","description":"https://www.hacksplaining.com/prevention/ssrf"},{"url":"https://portswigger.net/web-security/ssrf","description":"https://portswigger.net/web-security/ssrf"},{"url":"https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html","description":"https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html"},{"url":"https://www.rapid7.com/blog/post/2021/11/23/owasp-top-10-deep-dive-defending-against-server-side-request-forgery/","description":"https://www.rapid7.com/blog/post/2021/11/23/owasp-top-10-deep-dive-defending-against-server-side-request-forgery/"},{"url":"https://blog.assetnote.io/2021/01/13/blind-ssrf-chains/","description":"https://blog.assetnote.io/2021/01/13/blind-ssrf-chains/"}],"properties":{},"changeset":[{"path":"src/main/java/org/owasp/webgoat/lessons/jwt/claimmisuse/JWTHeaderJKUEndpoint.java","diff":"--- JWTHeaderJKUEndpoint.java\n+++ JWTHeaderJKUEndpoint.java\n@@ -6,6 +6,8 @@\n import com.auth0.jwt.JWT;\n import com.auth0.jwt.algorithms.Algorithm;\n import com.auth0.jwt.exceptions.JWTVerificationException;\n+import io.github.pixee.security.HostValidator;\n+import io.github.pixee.security.Urls;\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.security.interfaces.RSAPublicKey;\n@@ -48,7 +50,7 @@\n       try {\n         var decodedJWT = JWT.decode(token);\n         var jku = decodedJWT.getHeaderClaim(\"jku\");\n-        JwkProvider jwkProvider = new JwkProviderBuilder(new URL(jku.asString())).build();\n+        JwkProvider jwkProvider = new JwkProviderBuilder(Urls.create(jku.asString(), Urls.HTTP_PROTOCOLS, HostValidator.DENY_COMMON_INFRASTRUCTURE_TARGETS)).build();\n         var jwk = jwkProvider.get(decodedJWT.getKeyId());\n         var algorithm = Algorithm.RSA256((RSAPublicKey) jwk.getPublicKey());\n         JWT.require(algorithm).build().verify(decodedJWT);","changes":[{"lineNumber":51,"properties":{},"description":"Wrapped the URL creation with a method that forces the caller to pick allowed protocols and domains that this URL can reach","diffSide":"left","packageActions":[{"action":"ADD","result":"SKIPPED","package":"pkg:maven/io.github.pixee/java-security-toolkit@1.1.2"}],"parameters":[]}]},{"path":"src/main/java/org/owasp/webgoat/lessons/ssrf/SSRFTask2.java","diff":"--- SSRFTask2.java\n+++ SSRFTask2.java\n@@ -22,6 +22,8 @@\n \n package org.owasp.webgoat.lessons.ssrf;\n \n+import io.github.pixee.security.HostValidator;\n+import io.github.pixee.security.Urls;\n import java.io.IOException;\n import java.io.InputStream;\n import java.net.MalformedURLException;\n@@ -48,7 +50,7 @@\n   protected AttackResult furBall(String url) {\n     if (url.matches(\"http://ifconfig\\\\.pro\")) {\n       String html;\n-      try (InputStream in = new URL(url).openStream()) {\n+      try (InputStream in = Urls.create(url, Urls.HTTP_PROTOCOLS, HostValidator.DENY_COMMON_INFRASTRUCTURE_TARGETS).openStream()) {\n         html =\n             new String(in.readAllBytes(), StandardCharsets.UTF_8)\n                 .replaceAll(\"\\n\", \"<br>\"); // Otherwise the \\n gets escaped in the response","changes":[{"lineNumber":51,"properties":{},"description":"Wrapped the URL creation with a method that forces the caller to pick allowed protocols and domains that this URL can reach","diffSide":"left","packageActions":[{"action":"ADD","result":"SKIPPED","package":"pkg:maven/io.github.pixee/java-security-toolkit@1.1.2"}],"parameters":[]}]}]},{"codemod":"pixee:java/switch-literal-first","summary":"Switch order of literals to prevent NullPointerException","description":"This change defensively switches the order of literals in comparison expressions to ensure that no null pointer exceptions are unexpectedly thrown. Runtime exceptions especially can cause exceptional and unexpected code paths to be taken, and this can result in unexpected behavior. \n\nBoth simple vulnerabilities (like information disclosure) and complex vulnerabilities (like business logic flaws) can take advantage of these unexpected code paths.\n\nOur changes look something like this:\n\n```diff\n  String fieldName = header.getFieldName();\n  String fieldValue = header.getFieldValue();\n- if(fieldName.equals(\"requestId\")) {\n+ if(\"requestId\".equals(fieldName)) {\n    logRequest(fieldValue);\n  }\n```\n","failedFiles":[],"references":[{"url":"http://cwe.mitre.org/data/definitions/476.html","description":"http://cwe.mitre.org/data/definitions/476.html"},{"url":"https://en.wikibooks.org/wiki/Java_Programming/Preventing_NullPointerException","description":"https://en.wikibooks.org/wiki/Java_Programming/Preventing_NullPointerException"},{"url":"https://rules.sonarsource.com/java/RSPEC-1132/","description":"https://rules.sonarsource.com/java/RSPEC-1132/"}],"properties":{},"changeset":[{"path":"src/main/java/org/owasp/webgoat/container/AsciiDoctorTemplateResolver.java","diff":"--- AsciiDoctorTemplateResolver.java\n+++ AsciiDoctorTemplateResolver.java\n@@ -123,7 +123,7 @@\n \n   private String computeResourceName(String resourceName, String language) {\n     String computedResourceName;\n-    if (language.equals(\"en\")) {\n+    if (\"en\".equals(language)) {\n       computedResourceName = resourceName;\n     } else {\n       computedResourceName = resourceName.replace(\".adoc\", \"_\".concat(language).concat(\".adoc\"));","changes":[{"lineNumber":126,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]}]},{"path":"src/main/java/org/owasp/webgoat/container/UserInterceptor.java","diff":"--- UserInterceptor.java\n+++ UserInterceptor.java\n@@ -35,7 +35,7 @@\n       if (null != env) {\n         String githubClientId =\n             env.getProperty(\"spring.security.oauth2.client.registration.github.client-id\");\n-        if (null != githubClientId && !githubClientId.equals(\"dummy\")) {\n+        if (null != githubClientId && !\"dummy\".equals(githubClientId)) {\n           modelAndView.getModel().put(\"oauth\", Boolean.TRUE);\n         }\n       } else {","changes":[{"lineNumber":38,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]}]},{"path":"src/main/java/org/owasp/webgoat/container/lessons/Assignment.java","diff":"--- Assignment.java\n+++ Assignment.java\n@@ -63,7 +63,7 @@\n   }\n \n   public Assignment(String name, String path, List<String> hints) {\n-    if (path.equals(\"\") || path.equals(\"/\") || path.equals(\"/WebGoat/\")) {\n+    if (\"\".equals(path) || \"/\".equals(path) || \"/WebGoat/\".equals(path)) {\n       throw new IllegalStateException(\n           \"The path of assignment '\"\n               + name","changes":[{"lineNumber":66,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]},{"lineNumber":66,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]},{"lineNumber":66,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]}]},{"path":"src/main/java/org/owasp/webgoat/lessons/bypassrestrictions/BypassRestrictionsFieldRestrictions.java","diff":"--- BypassRestrictionsFieldRestrictions.java\n+++ BypassRestrictionsFieldRestrictions.java\n@@ -40,13 +40,13 @@\n       @RequestParam String checkbox,\n       @RequestParam String shortInput,\n       @RequestParam String readOnlyInput) {\n-    if (select.equals(\"option1\") || select.equals(\"option2\")) {\n+    if (\"option1\".equals(select) || \"option2\".equals(select)) {\n       return failed(this).build();\n     }\n-    if (radio.equals(\"option1\") || radio.equals(\"option2\")) {\n+    if (\"option1\".equals(radio) || \"option2\".equals(radio)) {\n       return failed(this).build();\n     }\n-    if (checkbox.equals(\"on\") || checkbox.equals(\"off\")) {\n+    if (\"on\".equals(checkbox) || \"off\".equals(checkbox)) {\n       return failed(this).build();\n     }\n     if (shortInput.length() <= 5) {","changes":[{"lineNumber":43,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]},{"lineNumber":43,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]},{"lineNumber":46,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]},{"lineNumber":46,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]},{"lineNumber":49,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]},{"lineNumber":49,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]}]},{"path":"src/main/java/org/owasp/webgoat/lessons/challenges/challenge7/Assignment7.java","diff":"--- Assignment7.java\n+++ Assignment7.java\n@@ -57,7 +57,7 @@\n \n   @GetMapping(\"/challenge/7/reset-password/{link}\")\n   public ResponseEntity<String> resetPassword(@PathVariable(value = \"link\") String link) {\n-    if (link.equals(ADMIN_PASSWORD_LINK)) {\n+    if (ADMIN_PASSWORD_LINK.equals(link)) {\n       return ResponseEntity.accepted()\n           .body(\n               \"<h1>Success!!</h1>\"","changes":[{"lineNumber":60,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]}]},{"path":"src/main/java/org/owasp/webgoat/lessons/challenges/challenge7/PasswordResetLink.java","diff":"--- PasswordResetLink.java\n+++ PasswordResetLink.java\n@@ -12,7 +12,7 @@\n \n   public String createPasswordReset(String username, String key) {\n     Random random = new Random();\n-    if (username.equalsIgnoreCase(\"admin\")) {\n+    if (\"admin\".equalsIgnoreCase(username)) {\n       // Admin has a fix reset link\n       random.setSeed(key.length());\n     }","changes":[{"lineNumber":15,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]}]},{"path":"src/main/java/org/owasp/webgoat/lessons/cryptography/SecureDefaultsAssignment.java","diff":"--- SecureDefaultsAssignment.java\n+++ SecureDefaultsAssignment.java\n@@ -44,7 +44,7 @@\n   public AttackResult completed(\n       @RequestParam String secretFileName, @RequestParam String secretText)\n       throws NoSuchAlgorithmException {\n-    if (secretFileName != null && secretFileName.equals(\"default_secret\")) {\n+    if (secretFileName != null && \"default_secret\".equals(secretFileName)) {\n       if (secretText != null\n           && HashingAssignment.getHash(secretText, \"SHA-256\")\n               .equalsIgnoreCase(","changes":[{"lineNumber":47,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]}]},{"path":"src/main/java/org/owasp/webgoat/lessons/cryptography/XOREncodingAssignment.java","diff":"--- XOREncodingAssignment.java\n+++ XOREncodingAssignment.java\n@@ -37,7 +37,7 @@\n   @PostMapping(\"/crypto/encoding/xor\")\n   @ResponseBody\n   public AttackResult completed(@RequestParam String answer_pwd1) {\n-    if (answer_pwd1 != null && answer_pwd1.equals(\"databasepassword\")) {\n+    if (answer_pwd1 != null && \"databasepassword\".equals(answer_pwd1)) {\n       return success(this).feedback(\"crypto-encoding-xor.success\").build();\n     }\n     return failed(this).feedback(\"crypto-encoding-xor.empty\").build();","changes":[{"lineNumber":40,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]}]},{"path":"src/main/java/org/owasp/webgoat/lessons/csrf/CSRFGetFlag.java","diff":"--- CSRFGetFlag.java\n+++ CSRFGetFlag.java\n@@ -52,7 +52,7 @@\n     String referer = (req.getHeader(\"referer\") == null) ? \"NULL\" : req.getHeader(\"referer\");\n     String[] refererArr = referer.split(\"/\");\n \n-    if (referer.equals(\"NULL\")) {\n+    if (\"NULL\".equals(referer)) {\n       if (\"true\".equals(req.getParameter(\"csrf\"))) {\n         Random random = new Random();\n         userSessionData.setValue(\"csrf-get-success\", random.nextInt(65536));","changes":[{"lineNumber":55,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]}]},{"path":"src/main/java/org/owasp/webgoat/lessons/csrf/ForgedReviews.java","diff":"--- ForgedReviews.java\n+++ ForgedReviews.java\n@@ -103,7 +103,7 @@\n     reviews.add(review);\n     userReviews.put(webSession.getUserName(), reviews);\n     // short-circuit\n-    if (validateReq == null || !validateReq.equals(weakAntiCSRF)) {\n+    if (validateReq == null || !weakAntiCSRF.equals(validateReq)) {\n       return failed(this).feedback(\"csrf-you-forgot-something\").build();\n     }\n     // we have the spoofed files","changes":[{"lineNumber":106,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]}]},{"path":"src/main/java/org/owasp/webgoat/lessons/idor/IDORDiffAttributes.java","diff":"--- IDORDiffAttributes.java\n+++ IDORDiffAttributes.java\n@@ -47,10 +47,10 @@\n     if (diffAttribs.length < 2) {\n       return failed(this).feedback(\"idor.diff.attributes.missing\").build();\n     }\n-    if (diffAttribs[0].toLowerCase().trim().equals(\"userid\")\n-            && diffAttribs[1].toLowerCase().trim().equals(\"role\")\n-        || diffAttribs[1].toLowerCase().trim().equals(\"userid\")\n-            && diffAttribs[0].toLowerCase().trim().equals(\"role\")) {\n+    if (\"userid\".equals(diffAttribs[0].toLowerCase().trim())\n+            && \"role\".equals(diffAttribs[1].toLowerCase().trim())\n+        || \"userid\".equals(diffAttribs[1].toLowerCase().trim())\n+            && \"role\".equals(diffAttribs[0].toLowerCase().trim())) {\n       return success(this).feedback(\"idor.diff.success\").build();\n     } else {\n       return failed(this).feedback(\"idor.diff.failure\").build();","changes":[{"lineNumber":50,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]},{"lineNumber":51,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]},{"lineNumber":52,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]},{"lineNumber":53,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]}]},{"path":"src/main/java/org/owasp/webgoat/lessons/idor/IDOREditOtherProfile.java","diff":"--- IDOREditOtherProfile.java\n+++ IDOREditOtherProfile.java\n@@ -103,7 +103,7 @@\n       return failed(this).feedback(\"idor.edit.profile.failure4\").build();\n     }\n \n-    if (currentUserProfile.getColor().equals(\"black\") && currentUserProfile.getRole() <= 1) {\n+    if (\"black\".equals(currentUserProfile.getColor()) && currentUserProfile.getRole() <= 1) {\n       return success(this)\n           .feedback(\"idor.edit.profile.success2\")\n           .output(userSessionData.getValue(\"idor-updated-own-profile\").toString())","changes":[{"lineNumber":106,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]}]},{"path":"src/main/java/org/owasp/webgoat/lessons/idor/IDORViewOtherProfile.java","diff":"--- IDORViewOtherProfile.java\n+++ IDORViewOtherProfile.java\n@@ -66,7 +66,7 @@\n         // secure code would ensure there was a horizontal access control check prior to dishing up\n         // the requested profile\n         if (requestedProfile.getUserId() != null\n-            && requestedProfile.getUserId().equals(\"2342388\")) {\n+            && \"2342388\".equals(requestedProfile.getUserId())) {\n           return success(this)\n               .feedback(\"idor.view.profile.success\")\n               .output(requestedProfile.profileToMap().toString())","changes":[{"lineNumber":69,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]}]},{"path":"src/main/java/org/owasp/webgoat/lessons/idor/IDORViewOwnProfileAltUrl.java","diff":"--- IDORViewOwnProfileAltUrl.java\n+++ IDORViewOwnProfileAltUrl.java\n@@ -52,9 +52,9 @@\n         String authUserId = (String) userSessionData.getValue(\"idor-authenticated-user-id\");\n         // don't care about http://localhost:8080 ... just want WebGoat/\n         String[] urlParts = url.split(\"/\");\n-        if (urlParts[0].equals(\"WebGoat\")\n-            && urlParts[1].equals(\"IDOR\")\n-            && urlParts[2].equals(\"profile\")\n+        if (\"WebGoat\".equals(urlParts[0])\n+            && \"IDOR\".equals(urlParts[1])\n+            && \"profile\".equals(urlParts[2])\n             && urlParts[3].equals(authUserId)) {\n           UserProfile userProfile = new UserProfile(authUserId);\n           return success(this)","changes":[{"lineNumber":55,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]},{"lineNumber":56,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]},{"lineNumber":57,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]}]},{"path":"src/main/java/org/owasp/webgoat/lessons/idor/UserProfile.java","diff":"--- UserProfile.java\n+++ UserProfile.java\n@@ -44,14 +44,14 @@\n   //\n   private void setProfileFromId(String id) {\n     // emulate look up from database\n-    if (id.equals(\"2342384\")) {\n+    if (\"2342384\".equals(id)) {\n       this.userId = id;\n       this.color = \"yellow\";\n       this.name = \"Tom Cat\";\n       this.size = \"small\";\n       this.isAdmin = false;\n       this.role = 3;\n-    } else if (id.equals(\"2342388\")) {\n+    } else if (\"2342388\".equals(id)) {\n       this.userId = id;\n       this.color = \"brown\";\n       this.name = \"Buffalo Bill\";","changes":[{"lineNumber":47,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]},{"lineNumber":54,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]}]},{"path":"src/main/java/org/owasp/webgoat/lessons/logging/LogBleedingTask.java","diff":"--- LogBleedingTask.java\n+++ LogBleedingTask.java\n@@ -57,7 +57,7 @@\n       return failed(this).output(\"Please provide username (Admin) and password\").build();\n     }\n \n-    if (username.equals(\"Admin\") && password.equals(this.password)) {\n+    if (\"Admin\".equals(username) && password.equals(this.password)) {\n       return success(this).build();\n     }\n ","changes":[{"lineNumber":60,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]}]},{"path":"src/main/java/org/owasp/webgoat/lessons/missingac/MissingFunctionACHiddenMenus.java","diff":"--- MissingFunctionACHiddenMenus.java\n+++ MissingFunctionACHiddenMenus.java\n@@ -43,11 +43,11 @@\n       produces = {\"application/json\"})\n   @ResponseBody\n   public AttackResult completed(String hiddenMenu1, String hiddenMenu2) {\n-    if (hiddenMenu1.equals(\"Users\") && hiddenMenu2.equals(\"Config\")) {\n+    if (\"Users\".equals(hiddenMenu1) && \"Config\".equals(hiddenMenu2)) {\n       return success(this).output(\"\").feedback(\"access-control.hidden-menus.success\").build();\n     }\n \n-    if (hiddenMenu1.equals(\"Config\") && hiddenMenu2.equals(\"Users\")) {\n+    if (\"Config\".equals(hiddenMenu1) && \"Users\".equals(hiddenMenu2)) {\n       return failed(this).output(\"\").feedback(\"access-control.hidden-menus.close\").build();\n     }\n ","changes":[{"lineNumber":46,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]},{"lineNumber":46,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]},{"lineNumber":50,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]},{"lineNumber":50,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]}]},{"path":"src/main/java/org/owasp/webgoat/lessons/passwordreset/ResetLinkAssignment.java","diff":"--- ResetLinkAssignment.java\n+++ ResetLinkAssignment.java\n@@ -85,7 +85,7 @@\n     if (TOM_EMAIL.equals(email)) {\n       String passwordTom =\n           usersToTomPassword.getOrDefault(getWebSession().getUserName(), PASSWORD_TOM_9);\n-      if (passwordTom.equals(PASSWORD_TOM_9)) {\n+      if (PASSWORD_TOM_9.equals(passwordTom)) {\n         return failed(this).feedback(\"login_failed\").build();\n       } else if (passwordTom.equals(password)) {\n         return success(this).build();","changes":[{"lineNumber":88,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]}]},{"path":"src/main/java/org/owasp/webgoat/lessons/spoofcookie/SpoofCookieAssignment.java","diff":"--- SpoofCookieAssignment.java\n+++ SpoofCookieAssignment.java\n@@ -114,7 +114,7 @@\n       return failed(this).output(e.getMessage()).build();\n     }\n     if (users.containsKey(cookieUsername)) {\n-      if (cookieUsername.equals(ATTACK_USERNAME)) {\n+      if (ATTACK_USERNAME.equals(cookieUsername)) {\n         return success(this).build();\n       }\n       return failed(this)","changes":[{"lineNumber":117,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]}]},{"path":"src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson2.java","diff":"--- SqlInjectionLesson2.java\n+++ SqlInjectionLesson2.java\n@@ -67,7 +67,7 @@\n \n       results.first();\n \n-      if (results.getString(\"department\").equals(\"Marketing\")) {\n+      if (\"Marketing\".equals(results.getString(\"department\"))) {\n         output.append(\"<span class='feedback-positive'>\" + query + \"</span>\");\n         output.append(SqlInjectionLesson8.generateTable(results));\n         return success(this).feedback(\"sql-injection.2.success\").output(output.toString()).build();","changes":[{"lineNumber":70,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]}]},{"path":"src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson3.java","diff":"--- SqlInjectionLesson3.java\n+++ SqlInjectionLesson3.java\n@@ -66,7 +66,7 @@\n         StringBuilder output = new StringBuilder();\n         // user completes lesson if the department of Tobi Barnett now is 'Sales'\n         results.first();\n-        if (results.getString(\"department\").equals(\"Sales\")) {\n+        if (\"Sales\".equals(results.getString(\"department\"))) {\n           output.append(\"<span class='feedback-positive'>\" + query + \"</span>\");\n           output.append(SqlInjectionLesson8.generateTable(results));\n           return success(this).output(output.toString()).build();","changes":[{"lineNumber":69,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]}]},{"path":"src/main/java/org/owasp/webgoat/lessons/xss/CrossSiteScriptingLesson3.java","diff":"--- CrossSiteScriptingLesson3.java\n+++ CrossSiteScriptingLesson3.java\n@@ -68,10 +68,10 @@\n           && include.contains(\"%>\")) {\n         includeCorrect = true;\n       }\n-      if (fistNameElement.equals(\"${e:forHtml(param.first_name)}\")) {\n+      if (\"${e:forHtml(param.first_name)}\".equals(fistNameElement)) {\n         firstNameCorrect = true;\n       }\n-      if (lastNameElement.equals(\"${e:forHtml(param.last_name)}\")) {\n+      if (\"${e:forHtml(param.last_name)}\".equals(lastNameElement)) {\n         lastNameCorrect = true;\n       }\n ","changes":[{"lineNumber":71,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]},{"lineNumber":74,"properties":{},"description":"Switch order of literals to prevent NullPointerException","diffSide":"left","packageActions":[],"parameters":[]}]}]},{"codemod":"pixee:java/secure-random","summary":"Introduced protections against predictable RNG abuse","description":"This change replaces all new instances of `java.util.Random` with the marginally slower, but much more secure `java.security.SecureRandom`.\n\nWe have to work pretty hard to get computers to generate genuinely unguessable random bits. The `java.util.Random` type uses a method of pseudo-random number generation that unfortunately emits fairly predictable numbers.\n\nIf the numbers it emits are predictable, then it's obviously not safe to use in cryptographic operations, file name creation, token construction, password generation, and anything else that's related to security. In fact, it may affect security even if it's not directly obvious.\n\nSwitching to a more secure version is simple and our changes all look something like this:\n\n```diff\n- Random r = new Random();\n+ Random r = new java.security.SecureRandom();\n```\n","failedFiles":[],"references":[{"url":"https://owasp.org/www-community/vulnerabilities/Insecure_Randomness","description":"https://owasp.org/www-community/vulnerabilities/Insecure_Randomness"},{"url":"https://metebalci.com/blog/everything-about-javas-securerandom/","description":"https://metebalci.com/blog/everything-about-javas-securerandom/"},{"url":"https://cwe.mitre.org/data/definitions/330.html","description":"https://cwe.mitre.org/data/definitions/330.html"}],"properties":{},"changeset":[{"path":"src/main/java/org/owasp/webgoat/lessons/challenges/challenge1/ImageServlet.java","diff":"--- ImageServlet.java\n+++ ImageServlet.java\n@@ -1,5 +1,6 @@\n package org.owasp.webgoat.lessons.challenges.challenge1;\n \n+import java.security.SecureRandom;\n import static org.springframework.web.bind.annotation.RequestMethod.GET;\n import static org.springframework.web.bind.annotation.RequestMethod.POST;\n \n@@ -14,7 +15,7 @@\n @RestController\n public class ImageServlet {\n \n-  public static final int PINCODE = new Random().nextInt(10000);\n+  public static final int PINCODE = new SecureRandom().nextInt(10000);\n \n   @RequestMapping(\n       method = {GET, POST},","changes":[{"lineNumber":17,"properties":{},"description":"Replaced the weak pseudo-random number generator with a strong one","diffSide":"left","packageActions":[],"parameters":[]}]},{"path":"src/main/java/org/owasp/webgoat/lessons/challenges/challenge7/PasswordResetLink.java","diff":"--- PasswordResetLink.java\n+++ PasswordResetLink.java\n@@ -1,5 +1,6 @@\n package org.owasp.webgoat.lessons.challenges.challenge7;\n \n+import java.security.SecureRandom;\n import java.util.Random;\n \n /**\n@@ -11,7 +12,7 @@\n public class PasswordResetLink {\n \n   public String createPasswordReset(String username, String key) {\n-    Random random = new Random();\n+    Random random = new SecureRandom();\n     if (\"admin\".equalsIgnoreCase(username)) {\n       // Admin has a fix reset link\n       random.setSeed(key.length());","changes":[{"lineNumber":14,"properties":{},"description":"Replaced the weak pseudo-random number generator with a strong one","diffSide":"left","packageActions":[],"parameters":[]}]},{"path":"src/main/java/org/owasp/webgoat/lessons/cryptography/EncodingAssignment.java","diff":"--- EncodingAssignment.java\n+++ EncodingAssignment.java\n@@ -23,6 +23,7 @@\n package org.owasp.webgoat.lessons.cryptography;\n \n import jakarta.servlet.http.HttpServletRequest;\n+import java.security.SecureRandom;\n import java.util.Base64;\n import java.util.Random;\n import org.owasp.webgoat.container.assignments.AssignmentEndpoint;\n@@ -49,7 +50,7 @@\n     String username = request.getUserPrincipal().getName();\n     if (basicAuth == null) {\n       String password =\n-          HashingAssignment.SECRETS[new Random().nextInt(HashingAssignment.SECRETS.length)];\n+          HashingAssignment.SECRETS[new SecureRandom().nextInt(HashingAssignment.SECRETS.length)];\n       basicAuth = getBasicAuth(username, password);\n       request.getSession().setAttribute(\"basicAuth\", basicAuth);\n     }","changes":[{"lineNumber":52,"properties":{},"description":"Replaced the weak pseudo-random number generator with a strong one","diffSide":"left","packageActions":[],"parameters":[]}]},{"path":"src/main/java/org/owasp/webgoat/lessons/cryptography/HashingAssignment.java","diff":"--- HashingAssignment.java\n+++ HashingAssignment.java\n@@ -25,6 +25,7 @@\n import jakarta.servlet.http.HttpServletRequest;\n import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n+import java.security.SecureRandom;\n import java.util.Random;\n import javax.xml.bind.DatatypeConverter;\n import org.owasp.webgoat.container.assignments.AssignmentEndpoint;\n@@ -50,7 +51,7 @@\n     String md5Hash = (String) request.getSession().getAttribute(\"md5Hash\");\n     if (md5Hash == null) {\n \n-      String secret = SECRETS[new Random().nextInt(SECRETS.length)];\n+      String secret = SECRETS[new SecureRandom().nextInt(SECRETS.length)];\n \n       MessageDigest md = MessageDigest.getInstance(\"MD5\");\n       md.update(secret.getBytes());\n@@ -68,7 +69,7 @@\n \n     String sha256 = (String) request.getSession().getAttribute(\"sha256\");\n     if (sha256 == null) {\n-      String secret = SECRETS[new Random().nextInt(SECRETS.length)];\n+      String secret = SECRETS[new SecureRandom().nextInt(SECRETS.length)];\n       sha256 = getHash(secret, \"SHA-256\");\n       request.getSession().setAttribute(\"sha256Hash\", sha256);\n       request.getSession().setAttribute(\"sha256Secret\", secret);","changes":[{"lineNumber":53,"properties":{},"description":"Replaced the weak pseudo-random number generator with a strong one","diffSide":"left","packageActions":[],"parameters":[]},{"lineNumber":71,"properties":{},"description":"Replaced the weak pseudo-random number generator with a strong one","diffSide":"left","packageActions":[],"parameters":[]}]},{"path":"src/main/java/org/owasp/webgoat/lessons/csrf/CSRFGetFlag.java","diff":"--- CSRFGetFlag.java\n+++ CSRFGetFlag.java\n@@ -23,6 +23,7 @@\n package org.owasp.webgoat.lessons.csrf;\n \n import jakarta.servlet.http.HttpServletRequest;\n+import java.security.SecureRandom;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Random;\n@@ -54,13 +55,13 @@\n \n     if (\"NULL\".equals(referer)) {\n       if (\"true\".equals(req.getParameter(\"csrf\"))) {\n-        Random random = new Random();\n+        Random random = new SecureRandom();\n         userSessionData.setValue(\"csrf-get-success\", random.nextInt(65536));\n         response.put(\"success\", true);\n         response.put(\"message\", pluginMessages.getMessage(\"csrf-get-null-referer.success\"));\n         response.put(\"flag\", userSessionData.getValue(\"csrf-get-success\"));\n       } else {\n-        Random random = new Random();\n+        Random random = new SecureRandom();\n         userSessionData.setValue(\"csrf-get-success\", random.nextInt(65536));\n         response.put(\"success\", true);\n         response.put(\"message\", pluginMessages.getMessage(\"csrf-get-other-referer.success\"));\n@@ -71,7 +72,7 @@\n       response.put(\"message\", \"Appears the request came from the original host\");\n       response.put(\"flag\", null);\n     } else {\n-      Random random = new Random();\n+      Random random = new SecureRandom();\n       userSessionData.setValue(\"csrf-get-success\", random.nextInt(65536));\n       response.put(\"success\", true);\n       response.put(\"message\", pluginMessages.getMessage(\"csrf-get-other-referer.success\"));","changes":[{"lineNumber":57,"properties":{},"description":"Replaced the weak pseudo-random number generator with a strong one","diffSide":"left","packageActions":[],"parameters":[]},{"lineNumber":63,"properties":{},"description":"Replaced the weak pseudo-random number generator with a strong one","diffSide":"left","packageActions":[],"parameters":[]},{"lineNumber":74,"properties":{},"description":"Replaced the weak pseudo-random number generator with a strong one","diffSide":"left","packageActions":[],"parameters":[]}]},{"path":"src/main/java/org/owasp/webgoat/lessons/hijacksession/cas/HijackSessionAuthenticationProvider.java","diff":"--- HijackSessionAuthenticationProvider.java\n+++ HijackSessionAuthenticationProvider.java\n@@ -23,6 +23,7 @@\n \n package org.owasp.webgoat.lessons.hijacksession.cas;\n \n+import java.security.SecureRandom;\n import java.time.Instant;\n import java.util.LinkedList;\n import java.util.Queue;\n@@ -45,7 +46,7 @@\n public class HijackSessionAuthenticationProvider implements AuthenticationProvider<Authentication> {\n \n   private Queue<String> sessions = new LinkedList<>();\n-  private static long id = new Random().nextLong() & Long.MAX_VALUE;\n+  private static long id = new SecureRandom().nextLong() & Long.MAX_VALUE;\n   protected static final int MAX_SESSIONS = 50;\n \n   private static final DoublePredicate PROBABILITY_DOUBLE_PREDICATE = pr -> pr < 0.75;","changes":[{"lineNumber":48,"properties":{},"description":"Replaced the weak pseudo-random number generator with a strong one","diffSide":"left","packageActions":[],"parameters":[]}]},{"path":"src/main/java/org/owasp/webgoat/lessons/jwt/JWTSecretKeyEndpoint.java","diff":"--- JWTSecretKeyEndpoint.java\n+++ JWTSecretKeyEndpoint.java\n@@ -27,6 +27,7 @@\n import io.jsonwebtoken.Jwts;\n import io.jsonwebtoken.SignatureAlgorithm;\n import io.jsonwebtoken.impl.TextCodec;\n+import java.security.SecureRandom;\n import java.time.Instant;\n import java.util.Calendar;\n import java.util.Date;\n@@ -50,7 +51,7 @@\n     \"victory\", \"business\", \"available\", \"shipping\", \"washington\"\n   };\n   public static final String JWT_SECRET =\n-      TextCodec.BASE64.encode(SECRETS[new Random().nextInt(SECRETS.length)]);\n+      TextCodec.BASE64.encode(SECRETS[new SecureRandom().nextInt(SECRETS.length)]);\n   private static final String WEBGOAT_USER = \"WebGoat\";\n   private static final List<String> expectedClaims =\n       List.of(\"iss\", \"iat\", \"exp\", \"aud\", \"sub\", \"username\", \"Email\", \"Role\");","changes":[{"lineNumber":53,"properties":{},"description":"Replaced the weak pseudo-random number generator with a strong one","diffSide":"left","packageActions":[],"parameters":[]}]}]}]}